// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for NewPatientGender.
const (
	NewPatientGenderFemale NewPatientGender = "female"
	NewPatientGenderMale   NewPatientGender = "male"
	NewPatientGenderOther  NewPatientGender = "other"
)

// Defines values for PatientGender.
const (
	PatientGenderFemale PatientGender = "female"
	PatientGenderMale   PatientGender = "male"
	PatientGenderOther  PatientGender = "other"
)

// Defines values for SignupRequestRole.
const (
	Doctor       SignupRequestRole = "doctor"
	Receptionist SignupRequestRole = "receptionist"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Message *string `json:"message,omitempty"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	AccessToken  *string `json:"access_token,omitempty"`
	RefreshToken *string `json:"refresh_token,omitempty"`
}

// NewPatient defines model for NewPatient.
type NewPatient struct {
	Age    int              `json:"age"`
	Email  string           `json:"email"`
	Gender NewPatientGender `json:"gender"`
	Name   string           `json:"name"`
}

// NewPatientGender defines model for NewPatient.Gender.
type NewPatientGender string

// Patient defines model for Patient.
type Patient struct {
	Age    int           `json:"age"`
	Email  string        `json:"email"`
	Gender PatientGender `json:"gender"`
	Id     *int          `json:"id,omitempty"`
	Name   string        `json:"name"`
}

// PatientGender defines model for Patient.Gender.
type PatientGender string

// SignupRequest defines model for SignupRequest.
type SignupRequest struct {
	Email    string            `json:"email"`
	Name     string            `json:"name"`
	Password string            `json:"password"`
	Role     SignupRequestRole `json:"role"`
}

// SignupRequestRole defines model for SignupRequest.Role.
type SignupRequestRole string

// PostLoginJSONRequestBody defines body for PostLogin for application/json ContentType.
type PostLoginJSONRequestBody = LoginRequest

// PostPatientsJSONRequestBody defines body for PostPatients for application/json ContentType.
type PostPatientsJSONRequestBody = NewPatient

// PutPatientsIdJSONRequestBody defines body for PutPatientsId for application/json ContentType.
type PutPatientsIdJSONRequestBody = NewPatient

// PostSignupJSONRequestBody defines body for PostSignup for application/json ContentType.
type PostSignupJSONRequestBody = SignupRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Login as doctor or receptionist
	// (POST /login)
	PostLogin(c *gin.Context)
	// List all patients
	// (GET /patients)
	GetPatients(c *gin.Context)
	// Create a new patient
	// (POST /patients)
	PostPatients(c *gin.Context)
	// Delete patient
	// (DELETE /patients/{id})
	DeletePatientsId(c *gin.Context, id int)
	// Get a single patient
	// (GET /patients/{id})
	GetPatientsId(c *gin.Context, id int)
	// Update patient info
	// (PUT /patients/{id})
	PutPatientsId(c *gin.Context, id int)
	// Register a new user (doctor/receptionist)
	// (POST /signup)
	PostSignup(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostLogin operation middleware
func (siw *ServerInterfaceWrapper) PostLogin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostLogin(c)
}

// GetPatients operation middleware
func (siw *ServerInterfaceWrapper) GetPatients(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPatients(c)
}

// PostPatients operation middleware
func (siw *ServerInterfaceWrapper) PostPatients(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostPatients(c)
}

// DeletePatientsId operation middleware
func (siw *ServerInterfaceWrapper) DeletePatientsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeletePatientsId(c, id)
}

// GetPatientsId operation middleware
func (siw *ServerInterfaceWrapper) GetPatientsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPatientsId(c, id)
}

// PutPatientsId operation middleware
func (siw *ServerInterfaceWrapper) PutPatientsId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutPatientsId(c, id)
}

// PostSignup operation middleware
func (siw *ServerInterfaceWrapper) PostSignup(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostSignup(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/login", wrapper.PostLogin)
	router.GET(options.BaseURL+"/patients", wrapper.GetPatients)
	router.POST(options.BaseURL+"/patients", wrapper.PostPatients)
	router.DELETE(options.BaseURL+"/patients/:id", wrapper.DeletePatientsId)
	router.GET(options.BaseURL+"/patients/:id", wrapper.GetPatientsId)
	router.PUT(options.BaseURL+"/patients/:id", wrapper.PutPatientsId)
	router.POST(options.BaseURL+"/signup", wrapper.PostSignup)
}
